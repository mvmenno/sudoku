{"version":3,"sources":["webpack:///./src/main.ts","webpack:///./src/generator.ts","webpack:///./src/solver.ts","webpack:///./src/storage.ts","webpack:///webpack/bootstrap"],"names":["gridSize","usedNumbers","shiftRows","board","solvedBoard","this","solver","Solver","getSolvedBoard","generatePresetValues","y","x","generateValue","i","randomizeBoard","JSON","parse","stringify","removedNumbers","cnt","ts","Date","now","boardClone","randY","Math","floor","random","randX","solveBoard","console","log","type","map","r","nr","rd","insertAndShift","arr","from","to","arrNew","cutOut","splice","shiftRow","n","c","foundValid","xs","indexOf","push","Generator","solutionCnt","getSolutionCnt","grid","row","col","count","num","isSafe","startRow","startCol","j","createCookie","name","value","days","expires","date","setTime","getTime","toUTCString","document","cookie","getCookie","nameEQ","ca","split","length","charAt","substring","save","data","load","Storage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","used","validBoard","storage","generator","reset","boardEl","getElementsByClassName","createBoard","self","setInterval","update","html","innerHTML","loadedData","validLoadData","updateBoard","el","toString","cntNumbers","input","querySelector","val","parseInt","isNaN","style","visibility","solvedEl","obj","updateValue","valid","lastDigit","color","window","onload","game","SudokuGame","inputs","querySelectorAll","addEventListener","e","classSplit","target","getAttribute"],"mappings":"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","file":"bundle.js","sourcesContent":["import {Storage} from './storage';\r\nimport {Generator} from './generator';\r\nimport {Solver} from './solver';\r\n\r\nclass SudokuGame{\r\n    public board :number[][];\r\n    protected solvedBoard:number[][];\r\n\r\n    protected boardEl:HTMLElement;\r\n\tprotected used = [];\r\n\tprotected shiftRows = [];\r\n\tprotected validBoard = false;\r\n    protected ts = 0;\r\n\r\n    protected storage:Storage;\r\n    protected generator:Generator;\r\n    protected solver:Solver;\r\n\r\n    constructor(){\r\n        this.storage = new Storage();\r\n        this.generator = new Generator();\r\n        this.solver = new Solver();\r\n\r\n        this.reset();\r\n    }\r\n    reset(){\r\n        this.ts = Date.now();\r\n        this.board = [];\r\n        this.solvedBoard = [];\r\n        this.used = [];\r\n        this.shiftRows = [];\r\n        this.validBoard = false;\r\n        this.boardEl = <HTMLElement>document.getElementsByClassName('sudoku')[0];\r\n        this.createBoard();\r\n\r\n        var self = this;\r\n        setInterval(function(){\r\n            self.update();\r\n        },1000);\r\n    }\r\n\r\n    createBoard(){\r\n        var html = '';\r\n        for(var y=0; y < 9; y ++){\r\n            html += '<tr class=\"'+y+'\">';\r\n\r\n            this.board[y] = [];\r\n\r\n\r\n            for(var x=0; x < 9; x++){\r\n                html +=  '<td class=\"'+x+'\"><input type=\"text\" class=\"'+y+'-'+x+'\"/></td>';\r\n\r\n                this.board[y][x] = 0;\r\n            }\r\n            html += '</tr>';\r\n        }\r\n\r\n        this.boardEl.innerHTML = html;\r\n\r\n        var loadedData = this.storage.load();\r\n\r\n        var validLoadData = false;\r\n\r\n        if(loadedData){\r\n            var data = JSON.parse(loadedData);\r\n            if(data.board && data.solvedBoard){\r\n                validLoadData = true;\r\n                this.board = data.board.map((x) => x);\r\n                this.solvedBoard = data.solvedBoard.map((x) => x);\r\n            }\r\n        }\r\n        if(!validLoadData){\r\n           this.board = this.generator.generatePresetValues();\r\n           this.solvedBoard = this.generator.getSolvedBoard();\r\n        }\r\n\r\n        this.updateBoard();\r\n    }\r\n    update(){\r\n        var el = Math.floor((Date.now() - this.ts) / 1000);\r\n        var timeEl = <HTMLElement>document.getElementsByClassName('time')[0];\r\n        timeEl.innerHTML = el.toString()+'sec';\r\n    }\r\n\r\n    public updateBoard(){\r\n        this.boardEl = <HTMLElement>document.getElementsByClassName('sudoku')[0];\r\n\r\n        var cntNumbers = [];\r\n\r\n\r\n\r\n        for(var y=0; y < 9; y ++ ){\r\n            for(var x=0; x < 9; x++ ){\r\n                var input: HTMLInputElement = this.boardEl.querySelector(\"tr[class='\"+y+\"'] > td[class='\"+x+\"'] > input\");\r\n\r\n                var val:number = parseInt(input.value[input.value.length - 1]);\r\n                if(!isNaN(val)){\r\n                    this.board[y][x] = val;\r\n                }else{\r\n                    input.value = \"\";\r\n                }\r\n                if(this.board[y][x] !== 0){\r\n                   input.value = this.board[y][x].toString();\r\n                }\r\n                if(!cntNumbers[this.board[y][x]]){\r\n                    cntNumbers[this.board[y][x]] = 0;\r\n                }\r\n                cntNumbers[this.board[y][x]] ++;\r\n            }\r\n        }\r\n\r\n        for(var i=1; i <= 9; i++){\r\n            if(cntNumbers[i] >= 9){\r\n                var remainEl = <HTMLElement>document.getElementsByClassName('remaining')[0].querySelector('span[class=\"rm-'+i+'\"]');\r\n                remainEl.style.visibility = \"hidden\";\r\n            }else{\r\n                var remainEl = <HTMLElement>document.getElementsByClassName('remaining')[0].querySelector('span[class=\"rm-'+i+'\"]');\r\n                remainEl.style.visibility = \"visible\";\r\n            }\r\n        }\r\n        var solvedEl = <HTMLElement>document.getElementsByClassName('solved')[0];\r\n        if(JSON.stringify(this.board) == JSON.stringify(this.solvedBoard)){\r\n            solvedEl.style.visibility = \"visible\";\r\n            this.storage.save(\"\");\r\n            //this.reset();\r\n\r\n        }else{\r\n            solvedEl.style.visibility = \"hidden\";\r\n        }\r\n\r\n\r\n        var obj = {\r\n            board: this.board,\r\n            solvedBoard: this.solvedBoard\r\n        };\r\n\r\n        this.storage.save(JSON.stringify(obj));\r\n\r\n    }\r\n\tpublic updateValue(y:number,x:number){\r\n\t\tvar valid = true;\r\n\t\t\r\n\t\tvar input: HTMLInputElement = this.boardEl.querySelector('input[class=\"'+y+'-'+x+'\"');\r\n\t\t\r\n        if(input.value == ''){\r\n            this.board[y][x] = 0;\r\n            input.value = '';\r\n            return;\r\n        }else if(parseInt(input.value) <= 0){\r\n            this.board[y][x] = 0;\r\n            input.value = '';\r\n            return;\r\n        }\r\n        if(parseInt(input.value) > 9){\r\n            var lastDigit = parseInt(input.value[input.value.length -1]);\r\n\r\n            this.board[y][x] = lastDigit;\r\n            input.value = lastDigit.toString();\r\n        }\r\n        var val = parseInt(input.value);\r\n\t\tif(this.solvedBoard[y][x] > 0 ){\r\n            if(val != this.solvedBoard[y][x]){\r\n                valid = false;\r\n            }\r\n            if(valid){\r\n                this.validBoard = true;\r\n                input.style.color = '#008259';\r\n                \r\n            }else{\r\n                this.validBoard = false;\r\n                input.style.color = '#ff0000';\r\n            }\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nwindow.onload = function(){\r\n    \r\n    let game = new SudokuGame();\r\n\r\n\r\n    var inputs = document.querySelectorAll('tr > td > input');\r\n    for(var i = 0; i< inputs.length; i ++){\r\n        inputs[i].addEventListener('keyup',function(e){\r\n\t\t\r\n            var elem: HTMLElement = <HTMLElement> e.target;\r\n\t\t\tvar className = elem.getAttribute('class');\r\n\t\t\t\r\n\t\t\tvar classSplit = className.split('-');\r\n\t\t\t\r\n\t\t\tgame.updateValue(parseInt(classSplit[0]),parseInt(classSplit[1]));\r\n            game.updateBoard();\r\n        });\r\n        \r\n    }\r\n\r\n    var btnNew = document.getElementsByClassName('btn-new')[0];\r\n    \r\n    btnNew.addEventListener('click',function(e){\r\n        console.log('click!');\r\n        this.storage.save(\"\");\r\n        game.reset();\r\n    });\r\n\r\n\r\n\r\n}","import {Solver} from './solver';\r\n\r\nexport class Generator{\r\n\r\n\r\n    protected gridSize:number = 9;\r\n\tprotected usedNumbers = [];\r\n\tprotected shiftRows = [];\r\n    protected board:number[][] = [];\r\n    protected solvedBoard:number[][] = [];\r\n    \r\n    protected solver:Solver;\r\n\r\n\r\n    constructor(){\r\n        this.solver = new Solver();\r\n    }\r\n    \r\n    public getSolvedBoard(): number[][]{\r\n        return this.solvedBoard;\r\n    }\r\n    public generatePresetValues(): number[][]{\r\n\t\tvar r1 = 3;\t\r\n\t\tvar r2 = 1;\r\n        for(var y=0;y < this.gridSize ; y++){\r\n            if(y > 0){\r\n                if(y % 3 ==0){\r\n                    this.shiftRows[y] = r2;\r\n                }else{\r\n                    this.shiftRows[y] = r1;\r\n                }\r\n            }\r\n            this.board[y] = [];\r\n            for(var x=0;x <this.gridSize;x++){\r\n                this.board[y][x] = this.generateValue(y,x);\r\n            }\r\n        }\r\n        var randomizeRounds = 6;\r\n        for(var i = 0; i < randomizeRounds; i++){\r\n            this.board = this.randomizeBoard();\r\n        }\r\n        this.solvedBoard = JSON.parse(JSON.stringify(this.board));\r\n\r\n        var removeNumberCount =56;\r\n\r\n        var toRemoveArray: number[][] = [];\r\n        x = null;\r\n        var removedNumbers = 0;\r\n\r\n        var cnt = 0;\r\n\r\n        var ts:number = Date.now();\r\n\r\n        var boardClone = JSON.parse(JSON.stringify(this.board));\r\n        while(removedNumbers < removeNumberCount && cnt < 1000){\r\n            var boardClone = JSON.parse(JSON.stringify(this.board));\r\n            var randY = Math.floor(Math.random() * 9);\r\n            var randX = Math.floor(Math.random() * 9);\r\n            if(boardClone[randY][randX] != 0){\r\n                boardClone[randY][randX] = 0;   \r\n                var solCount = this.solver.solveBoard(boardClone,0,0);\r\n                if(solCount == 1){\r\n                    this.board[randY][randX] = 0;\r\n                    removedNumbers ++;\r\n                }\r\n            }\r\n            cnt++;\r\n        }\r\n\r\n        console.log('Time took: '+( (Date.now() - ts) /1000 )+' s');\r\n\r\n        return this.board;\r\n    }\r\n\r\n\r\n\r\n\r\n    public randomizeBoard(): number[][]{\r\n        var board = this.board.map((x) => x);\r\n\r\n        var shiftRounds = 6;\r\n\r\n        var r = Math.random();\r\n\r\n       // var type = 'shiftRow';\r\n        var type = '';\r\n        if(r < .50){\r\n            type = 'shiftRow';\r\n        }else{\r\n            type = 'shiftColumn';\r\n        }\r\n        if(type == 'shiftRow' || type == 'shiftColumn'){\r\n            var nr = 1;\r\n            r = Math.random();\r\n            if(r < .33){\r\n                nr = 1;\r\n            }else if(r < .66){\r\n                nr = 4;\r\n            }else{\r\n                nr = 7;\r\n            }\r\n            r = Math.random();\r\n            var rd = 0;\r\n\r\n            if(r > .5){\r\n                rd = 1;\r\n            }else{\r\n                rd = -1;\r\n            }\r\n            if(type == 'shiftRow'){\r\n                var boardNew = this.insertAndShift(board,nr,nr + rd);\r\n                board = boardNew;\r\n            }else{\r\n                for(var y=0;y < this.gridSize ; y++){\r\n                   board[y] = this.insertAndShift(board[y],nr,nr + rd);\r\n                }\r\n            }\r\n\r\n            \r\n\r\n\r\n\r\n\r\n        }\r\n        return board;\r\n    }\r\n    protected insertAndShift(arr, from, to) {\r\n\t\tvar arrNew = arr.map((x) => x);\r\n\t\t\r\n\t\tlet cutOut = arrNew.splice(from, 1) [0]; // cut the element at index 'from'\r\n\t\tarrNew.splice(to, 0, cutOut);            // insert it at index 'to'\r\n\t\t\r\n\t\treturn arrNew;\r\n\t}\r\n\r\n    protected shiftRow(){\r\n\r\n    }\r\n    protected generateValue(y:number,x:number): number{\r\n        var n = 0;\r\n\t\tvar c = 0;\r\n\t\tvar maxCount = 100000;\r\n\t\tvar foundValid = false;\r\n\t\tvar shift = 0; \r\n\r\n        if(y ==0){\r\n\t\t\twhile(!foundValid && c < maxCount){\r\n\t\t\t\tn = Math.floor(Math.random() * 9) + 1;\r\n\t\t\t\tif(this.usedNumbers.indexOf(n) === -1){\r\n\t\t\t\t\tthis.usedNumbers.push(n);\t\t\t\t\t\r\n                    foundValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(foundValid){\r\n                    return n;\r\n\t\t\t\t}\r\n\t\t\t\tc++;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tshift = this.shiftRows[y];\r\n            var xs = x + shift;\r\n            if(xs >= 9){\r\n                xs = xs - 9;\r\n            }\r\n            return this.board[y - 1][xs];\r\n        }\r\n\r\n        \r\n\r\n\r\n        return n;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","export class Solver{\r\n\r\n    protected solutionCnt : number = 0;\r\n    constructor(){\r\n\r\n    }\r\n\r\n    public getSolutionCnt(){\r\n        return this.solutionCnt;\r\n    }\r\n    public solveBoard(grid:number[][],row:number,col:number,count:number = 0):number{\r\n        var n:number = 9;\r\n        if(row == 9 ){\r\n            row = 0;\r\n            if(++col == 9){\r\n                return 1+count;\r\n            }\r\n        }\r\n        if(grid[row][col] != 0){\r\n            return this.solveBoard(grid,row+1,col,count);\r\n        }\r\n        for(var num = 1; num <= n && count < 2; num ++){\r\n            if(this.isSafe(grid,row,col,num)){\r\n                grid[row][col] = num;\r\n                count = this.solveBoard(grid,row+1,col,count);\r\n            }\r\n        }\r\n        grid[row][col] = 0;\r\n        return count;\r\n    }\r\n\r\n    protected isSafe(grid:number[][],row:number,col:number,num:number):boolean{\r\n        var n:number = 9;\r\n        \r\n        for(var x =0; x < n; x ++){\r\n            if(grid[row][x] == num){\r\n                return false;\r\n            }\r\n            if (grid[x][col] == num){\r\n                return false;\r\n            }\r\n        }\r\n        var startRow:number = row - row % 3;\r\n        var startCol:number = col - col % 3;\r\n\r\n        for (var i = 0; i < 3; i++){\r\n            for (var j = 0; j < 3; j++){\r\n\r\n                if(grid[i + startRow][j + startCol] == num){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n}","export class Storage{\r\n\r\n    protected createCookie(name:string, value:string, days:number) {\r\n        var expires\r\n        \r\n        if (days) {\r\n            var date = new Date()\r\n            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000)\r\n            expires = '; expires=' + date.toUTCString()\r\n        } else {\r\n            expires = ''\r\n        }\r\n        document.cookie = name + '=' + value + expires + '; path=/'\r\n    }\r\n    protected getCookie(name : string) {\r\n        var nameEQ = name + '='\r\n        var ca = document.cookie.split(';')\r\n        \r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i]\r\n            while (c.charAt(0) === ' ') {\r\n            c = c.substring(1, c.length)\r\n            }\r\n            if (c.indexOf(nameEQ) === 0) {\r\n            return c.substring(nameEQ.length, c.length)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    public save(data:string) : boolean{\r\n        var cookieName = 'sudoku';\r\n        this.createCookie(cookieName,data,30);\r\n        return true;\r\n    }\r\n    public load(): string{\r\n        var cookieName = 'sudoku';\r\n        return this.getCookie('sudoku');\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"sourceRoot":""}